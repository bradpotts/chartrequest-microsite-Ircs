---
/**
 * InfoBox with Horizontal Layout
 */
import Heading from './Heading.astro';
import Text from './Text.astro';

interface Props {
  icon?: string;
  title: string;
  titleLevel?: '1' | '2' | '3' | '4' | '5' | '6' | 1 | 2 | 3 | 4 | 5 | 6;
  titleSize?: 'xl' | 'lg' | 'md' | 'sm';
  value?: string;
  description?: string;
  class?: string;
  accent?: 'primary' | 'blue' | 'green' | 'amber' | 'purple' | 'gray' | 'none';
  color?: 'primary' | 'blue' | 'green' | 'amber' | 'purple' | 'gray';
  bgColor?: 'white' | 'light' | 'blue' | 'green' | 'amber' | 'purple' | 'gray';
}

const { 
  icon,
  title,
  titleLevel = '3',
  titleSize = 'sm',
  value,
  description,
  accent = 'primary',
  color = 'primary',
  bgColor = 'white',
  class: className = ''
} = Astro.props;

// Define all the styling objects
const accentColors = {
  primary: 'border-l-primary',
  blue: 'border-l-blue-500',
  green: 'border-l-emerald-500',
  amber: 'border-l-amber-500',
  purple: 'border-l-purple-500',
  gray: 'border-l-gray-500',
  none: ''
};

const iconColors = {
  primary: 'text-primary',
  blue: 'text-blue-600',
  green: 'text-green-600',
  amber: 'text-amber-500',
  purple: 'text-purple-600',
  gray: 'text-gray-800',
};

const bgColors = {
  white: 'bg-white',
  light: 'bg-gray-50',
  blue: 'bg-blue-50',
  green: 'bg-green-50',
  amber: 'bg-amber-50',
  purple: 'bg-purple-50',
  gray: 'bg-gray-50',
};

const borderColors = {
  white: 'border-gray-200',
  light: 'border-gray-200',
  blue: 'border-blue-200/70',
  green: 'border-green-200/70',
  amber: 'border-amber-200/70',
  purple: 'border-purple-200/70',
  gray: 'border-gray-200',
};

const hoverEffects = {
  white: 'hover:border-gray-300 hover:bg-gray-50/50',
  light: 'hover:border-gray-300 hover:bg-gray-100/50',
  blue: 'hover:border-blue-300/50 hover:bg-blue-50/70',
  green: 'hover:border-green-300/50 hover:bg-green-50/70',
  amber: 'hover:border-amber-300/50 hover:bg-amber-50/70',
  purple: 'hover:border-purple-300/50 hover:bg-purple-50/70',
  gray: 'hover:border-gray-300 hover:bg-gray-100/50',
};

const accentClass = accent !== 'none' ? `border-l-4 ${accentColors[accent]}` : '';
---

<div class={`${bgColors[bgColor]} ${borderColors[bgColor]} ${hoverEffects[bgColor]} border ${accentClass} rounded-xl p-6 transition-all duration-300 ${className}`}>
  <!-- Header with icon and title -->
  <div class="mb-4">
    <div class="flex items-start">
      {icon && (
        <div class={`${iconColors[color]} mr-4 flex-shrink-0 mt-1`}>
          <Fragment set:html={icon} />
        </div>
      )}
      <div class="flex-grow">
        {/* Value comes first in horizontal layout */}
        {value && <Text variant="stat" class="mb-1">{value}</Text>}
        
        <Heading level={titleLevel} size={titleSize} class="font-semibold">
          {title}
        </Heading>
        
        {/* Description */}
        {description && (
          <Text variant="body" color="default" class="mt-1">
            {description}
          </Text>
        )}
      </div>
    </div>
  </div>
  
  {/* Additional content */}
  <slot />
</div>
